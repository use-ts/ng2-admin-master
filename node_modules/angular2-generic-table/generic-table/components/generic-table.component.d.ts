import { OnInit, OnChanges, EventEmitter, Type, SimpleChanges } from '@angular/core';
import 'rxjs/Rx';
import { GtConfig } from '../interfaces/gt-config';
import { GtConfigField } from '../interfaces/gt-config-field';
import { GtConfigSetting } from '../interfaces/gt-config-setting';
import { GtTexts } from '../interfaces/gt-texts';
import { GtInformation } from '../interfaces/gt-information';
import { GtExpandedRow } from './gt-expanding-row.component';
import { GtRow } from '../interfaces/gt-row';
import { GtOptions } from '../interfaces/gt-options';
export declare class GenericTableComponent<R extends GtRow, C extends GtExpandedRow<R>> implements OnInit, OnChanges {
    gtRowComponent: Type<C>;
    configObject: GtConfig<R>;
    sortOrder: Array<any>;
    gtSettings: GtConfigSetting[];
    gtFields: GtConfigField<R, any>[];
    gtData: Array<any>;
    gtDefaultTexts: GtTexts;
    gtTexts: GtTexts;
    gtClasses: string;
    gtEvent: EventEmitter<{}>;
    gtDefaultOptions: GtOptions;
    gtOptions: GtOptions;
    store: Array<any>;
    loading: boolean;
    private debounceTimer;
    loadingProperty: string;
    gtInfo: GtInformation;
    private refreshPipe;
    private refreshSorting;
    constructor();
    /**
     * Sort table by object key.
     * @param {string} objectKey - name of key to sort on.
     * @param {any} event - such as key press during sorting.
     */
    private gtSort;
    /**
     * Change number of rows to be displayed.
     * @param {string} rowLength - total number of rows.
     * @param {boolean} reset - should page be reset to first page.
     * @returns {number} number of pages to display.
     */
    changeRowLength: (rowLength: any, reset?: boolean) => void;
    /**
     * Force a redraw of table rows.
     * As the table uses pure pipes, we need to force a redraw if an object in the array is changed to see the changes.
     */
    redraw: () => void;
    /** Update record range. */
    private updateRecordRange;
    /** Go to next page. */
    nextPage: () => void;
    /** Go to previous page. */
    previousPage: () => void;
    /** Request more data (used when lazy loading) */
    private getData;
    /**
     * Go to specific page.
     * @param {number} page - page number.
     */
    goToPage: (page: number) => void;
    /**
     * Apply filter(s).
     * @param {Object} filter - object containing key value pairs, where value should be array of values.
     */
    gtApplyFilter: (filter: Object) => void;
    /** Clear/remove applied filter(s). */
    gtClearFilter: () => void;
    /**
     * Search
     * @param {string} value - string containing one or more words
     */
    gtSearch: (value: string) => void;
    /**
     * Create store to hold previously loaded records.
     * @param {number} records - total number of records in store.
     * @param {number} perPage - how many records to show per page.
     * @returns {Array} a nested array to hold records per page.
     */
    private createStore;
    /**
     * Create placeholders for rows while loading data from back-end.
     * @param {number} perPage - how many records to show per page.
     * @returns {Array} an array containing empty records to be presented while fetching real data.
     */
    private loadingContent;
    /** Sort by sort order */
    private getSortOrder;
    /** Sort by column order */
    private getColumnOrder;
    /** Store filtered data for export */
    private data;
    /** Export data as CSV
     * @param {string} fileName - optional file name (overrides default file name).
     */
    exportCSV(fileName?: string): void;
    /** Return property */
    private getProperty;
    ngOnInit(): void;
    /**
     *  Extend object function.
     */
    private extend;
    ngOnChanges(changes: SimpleChanges): void;
}
